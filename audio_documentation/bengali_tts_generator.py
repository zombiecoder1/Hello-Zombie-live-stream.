#!/usr/bin/env python3
"""
Bengali TTS Audio Documentation Generator
ZombieCoder System - Complete Bengali Documentation
"""

import os
import sys
from datetime import datetime
from gtts import gTTS
import subprocess

class BengaliTTSGenerator:
    def __init__(self):
        self.output_dir = "audio_documentation"
        self.audio_file = "zombiecoder_complete_documentation_bengali.mp3"
        self.text_file = "zombiecoder_complete_documentation_bengali.txt"
        
    def read_documentation_text(self):
        """Read the Bengali documentation text"""
        try:
            with open(f"{self.output_dir}/{self.text_file}", 'r', encoding='utf-8') as f:
                text = f.read()
            print(f"‚úÖ Documentation text loaded: {self.text_file}")
            return text
        except Exception as e:
            print(f"‚ùå Error reading documentation text: {str(e)}")
            return None
    
    def generate_audio(self, text):
        """Generate audio from text using Google TTS with Bengali language"""
        try:
            print("üéß Generating Bengali audio with Google TTS...")
            
            # Create TTS object with Bengali language
            tts = gTTS(text=text, lang='bn', slow=False)
            
            # Save audio file
            audio_path = f"{self.output_dir}/{self.audio_file}"
            tts.save(audio_path)
            
            print(f"‚úÖ Bengali audio generated successfully: {self.audio_file}")
            return audio_path
            
        except Exception as e:
            print(f"‚ùå Error generating Bengali audio: {str(e)}")
            return None
    
    def get_audio_duration(self, audio_path):
        """Get audio duration using ffprobe"""
        try:
            result = subprocess.run([
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'csv=p=0', audio_path
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                duration = float(result.stdout.strip())
                return duration
            else:
                return None
                
        except Exception as e:
            print(f"Error getting audio duration: {str(e)}")
            return None
    
    def create_audio_metadata(self, audio_path, duration):
        """Create metadata file for audio"""
        metadata = {
            "title": "‡¶ú‡¶Æ‡ßç‡¶¨‡¶ø‡¶ï‡ßã‡¶°‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ - ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶®",
            "description": "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶®",
            "duration_seconds": duration,
            "duration_formatted": f"{int(duration//60)}:{int(duration%60):02d}",
            "generated_at": datetime.now().isoformat(),
            "file_size_mb": round(os.path.getsize(audio_path) / (1024*1024), 2),
            "language": "bn",
            "tts_engine": "Google TTS",
            "chapters": 14,
            "total_words": len(self.read_documentation_text().split()) if self.read_documentation_text() else 0
        }
        
        import json
        with open(f"{self.output_dir}/bengali_audio_metadata.json", 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Bengali audio metadata created")
        return metadata
    
    def generate_completion_report(self, metadata):
        """Generate completion report in Bengali"""
        report = f"""
# ‡¶ú‡¶Æ‡ßç‡¶¨‡¶ø‡¶ï‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ TTS ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü

## ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶®‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

### ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:
- **‡¶´‡¶æ‡¶á‡¶≤**: {self.audio_file}
- **‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤**: {metadata['duration_formatted']}
- **‡¶Ü‡¶ï‡¶æ‡¶∞**: {metadata['file_size_mb']} MB
- **‡¶≠‡¶æ‡¶∑‡¶æ**: {metadata['language']}
- **TTS ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶®**: {metadata['tts_engine']}
- **‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ**: {metadata['chapters']}
- **‡¶Æ‡ßã‡¶ü ‡¶∂‡¶¨‡ßç‡¶¶**: {metadata['total_words']}

### ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶ï‡¶≠‡¶æ‡¶∞‡ßá‡¶ú:
- ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§‡¶ø
- ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
- ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ü‡¶∞‡ßç‡¶ï‡¶ø‡¶ü‡ßá‡¶ï‡¶ö‡¶æ‡¶∞
- ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
- ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó
- ‡¶ú‡¶ø‡¶∞‡ßã ‡¶ü‡¶≤‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶∞‡ßÅ‡¶≤
- ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏
- ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®
- ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø
- ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ
- ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®
- ‡¶∏‡¶´‡¶≤‡¶§‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏
- ‡¶ú‡¶Æ‡ßç‡¶¨‡¶ø ‡¶ü‡¶ø‡¶Æ ‡¶∏‡ßç‡¶™‡¶ø‡¶∞‡¶ø‡¶ü
- ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞

### ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:
1. ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡ßÅ‡¶ù‡ßÅ‡¶®
2. ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶ø‡¶Æ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£ ‡¶â‡¶™‡¶ï‡¶∞‡¶£ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
3. ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ü‡¶∞‡ßç‡¶ï‡¶ø‡¶ü‡ßá‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏
4. ‡¶∏‡ßç‡¶ü‡ßá‡¶ï‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶®

### ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶ø‡¶§ ‡¶´‡¶æ‡¶á‡¶≤:
- {self.audio_file} - ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶®
- {self.text_file} - ‡¶â‡ßé‡¶∏ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶æ‡¶á‡¶≤
- bengali_audio_metadata.json - ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶Æ‡ßá‡¶ü‡¶æ‡¶°‡ßá‡¶ü‡¶æ
- bengali_tts_report.md - ‡¶è‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü

## ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ‚úÖ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£
        """
        
        with open(f"{self.output_dir}/bengali_tts_report.md", 'w', encoding='utf-8') as f:
            f.write(report)
        
        print("‚úÖ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶§‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    
    def generate_complete_documentation(self):
        """Generate complete Bengali audio documentation"""
        print("üßü ‡¶ú‡¶Æ‡ßç‡¶¨‡¶ø‡¶ï‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ TTS ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞")
        print("=" * 60)
        
        # Step 1: Read documentation text
        print("1. ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶°‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        text = self.read_documentation_text()
        
        if not text:
            print("‚ùå ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø")
            return False
        
        # Step 2: Generate audio
        print("2. Google TTS ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        audio_path = self.generate_audio(text)
        
        if audio_path:
            # Step 3: Get audio duration
            print("3. ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤ ‡¶ú‡¶æ‡¶®‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            duration = self.get_audio_duration(audio_path)
            
            if duration:
                print(f"   üìä ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤: {int(duration//60)}:{int(duration%60):02d}")
                
                # Step 4: Create metadata
                print("4. ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶Æ‡ßá‡¶ü‡¶æ‡¶°‡ßá‡¶ü‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                metadata = self.create_audio_metadata(audio_path, duration)
                
                # Step 5: Generate report
                print("5. ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶§‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                self.generate_completion_report(metadata)
                
                print(f"\nüéâ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                print(f"üìÅ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø: {self.output_dir}")
                print(f"üéµ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤: {self.audio_file}")
                print(f"‚è±Ô∏è ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤: {metadata['duration_formatted']}")
                print(f"üìä ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶ï‡¶æ‡¶∞: {metadata['file_size_mb']} MB")
                print(f"üìù ‡¶Æ‡ßã‡¶ü ‡¶∂‡¶¨‡ßç‡¶¶: {metadata['total_words']}")
                
                return True
            else:
                print("‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø")
                return False
        else:
            print("‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶§‡ßà‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•")
            return False

def main():
    """Main function"""
    generator = BengaliTTSGenerator()
    
    # Check if gTTS is installed
    try:
        import gtts
        print("‚úÖ Google TTS ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
    except ImportError:
        print("‚ùå Google TTS ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'gtts', '--break-system-packages'], check=True)
        print("‚úÖ Google TTS ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    
    # Generate complete documentation
    success = generator.generate_complete_documentation()
    
    if success:
        print("\nüéâ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
        print("üìÅ 'audio_documentation' ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶∏‡¶¨ ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶ø‡¶§ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
    else:
        print("\n‚ùå ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!")

if __name__ == "__main__":
    main()
